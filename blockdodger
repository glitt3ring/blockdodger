#!/usr/bin/env python3
import curses
import time
import random
import pygame
import os

pygame.mixer.init()
SOUNDS_PATH = os.path.join(os.path.dirname(__file__), "blockdodgersounds")

def play_sound(name):
    try:
        pygame.mixer.Sound(os.path.join(SOUNDS_PATH, name)).play()
    except:
        pass

HIGH_SCORE_PATH = os.path.join(os.path.expanduser("~"), "blockdodgerhighscore.txt")

def load_high_score():
    try:
        with open(HIGH_SCORE_PATH, "r") as f:
            score = int(f.read().strip())
            if score < 0:
                save_high_score(0)
                return 0
            elif score > 9999:
                save_high_score(9999)
                return 9999
            return score
    except:
        return 0

def save_high_score(score):
    score = max(0, min(score, 9999))
    with open(HIGH_SCORE_PATH, "w") as f:
        f.write(str(score))

def draw_border(stdscr):
    sh, sw = stdscr.getmaxyx()
    for x in range(sw):
        try:
            if x == 0 or x == sw - 1:
                stdscr.addstr(0, x, "+", curses.A_BOLD)
                stdscr.addstr(sh - 1, x, "+", curses.A_BOLD)
            else:
                stdscr.addstr(0, x, "-", curses.A_BOLD)
                stdscr.addstr(sh - 1, x, "-", curses.A_BOLD)
        except curses.error:
            pass

    for y in range(sh):
        try:
            if y == 0 or y == sh - 1:
                continue
            stdscr.addstr(y, 0, "|", curses.A_BOLD)
            stdscr.addstr(y, sw - 1, "|", curses.A_BOLD)
        except curses.error:
            pass

def title_screen(stdscr):
    curses.curs_set(0)
    stdscr.nodelay(False)

    sh, sw = stdscr.getmaxyx()

    title_text = "BLOCK DODGER"
    typed_text = ""

    while True:
        stdscr.clear()
        draw_border(stdscr)

        if len(typed_text) < len(title_text):
            typed_text += title_text[len(typed_text)]
            play_sound("type.wav")
            stdscr.attron(curses.color_pair(2))
            stdscr.addstr(sh // 3, sw // 2 - len(title_text) // 2, typed_text)
            stdscr.attroff(curses.color_pair(2))
            stdscr.refresh()
            time.sleep(0.1)
            continue

        stdscr.attron(curses.color_pair(2))
        stdscr.addstr(sh // 3, sw // 2 - len(title_text) // 2, title_text)
        stdscr.attroff(curses.color_pair(2))

        start_text = "START"
        stdscr.attron(curses.color_pair(1))
        stdscr.addstr(sh // 2, sw // 2 - len(start_text)//2, start_text)
        stdscr.attroff(curses.color_pair(1))

        stdscr.addstr(sh - 6, 1, "Made by Glitt3ring", curses.color_pair(2))
        stdscr.addstr(sh - 5, 1, "Press Enter to Start", curses.color_pair(2))
        stdscr.addstr(sh - 4, 1, "Arrow Keys to Move", curses.color_pair(2))
        stdscr.addstr(sh - 3, 1, "Press P to Pause.", curses.color_pair(2))
        stdscr.addstr(sh - 2, 1, "Press Q to quit.", curses.color_pair(2))
        stdscr.refresh()

        key = stdscr.getch()
        if key in [10, 13]:
            play_sound("start.wav")
            return

def pause_menu(stdscr):
    sh, sw = stdscr.getmaxyx()
    pause_win = curses.newwin(5, 21, sh // 4, (sw - 21) // 2)
    draw_border(pause_win)

    pause_win.addstr(1, 1, "Game Paused", curses.color_pair(3))
    pause_win.addstr(3, 1, "Press 'P' to Resume", curses.color_pair(3))
    pause_win.refresh()

    play_sound("pause.wav")

    while True:
        key = stdscr.getch()
        if key == ord('p'):
            play_sound("resume.wav")
            break

def main(stdscr):
    curses.start_color()
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_MAGENTA)
    curses.init_pair(2, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_RED, curses.COLOR_RED)
    curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_BLUE)
    curses.init_pair(7, curses.COLOR_RED, curses.COLOR_BLACK)

    title_screen(stdscr)

    high_score = load_high_score()

    speed = 0.1
    base_spawn_rate = 0.15
    max_spawn_rate = 0.5

    stdscr.nodelay(True)
    stdscr.timeout(100)

    sh, sw = stdscr.getmaxyx()
    player_x = sw // 2
    player_char = "##"
    block_char = "##"

    blocks = []
    score = 0

    while True:
        stdscr.clear()
        draw_border(stdscr)

        spawn_rate = min(base_spawn_rate + (score / 100), max_spawn_rate)

        stdscr.addstr(0, 2, f"Score: {score}  High Score: {high_score}", curses.color_pair(3))

        stdscr.attron(curses.color_pair(6))
        stdscr.addstr(sh - 2, player_x, player_char)
        stdscr.attroff(curses.color_pair(6))

        if random.random() < spawn_rate:
            blocks.append([1, random.randint(1, sw - 3)])

        for b in blocks:
            b[0] += 1
            if b[0] < sh - 1 and b[1] < sw - 2:
                stdscr.addstr(b[0], b[1], block_char, curses.color_pair(5))

        for b in blocks:
            if b[0] == sh - 2:
                if (b[1] == player_x or b[1] == player_x + 1 or b[1] + 1 == player_x or b[1] + 1 == player_x + 1):
                    play_sound("hit.wav")
                    play_sound("game_over.wav")

                    stdscr.addstr(sh - 2, player_x, "  ")
                    stdscr.addstr(sh - 2, player_x + 1, " ")

                    for b in blocks:
                        stdscr.addstr(b[0], b[1], "  ")

                    stdscr.clear()
                    draw_border(stdscr)

                    stdscr.addstr(sh // 2, sw // 2 - 5, "GAME OVER", curses.color_pair(7))
                    stdscr.refresh()
                    time.sleep(2)

                    if score > high_score:
                        save_high_score(score)
                    return

        blocks = [b for b in blocks if b[0] < sh - 1]

        score += 1
        if score > 9999:
            score = 9999

        stdscr.refresh()

        key = stdscr.getch()
        if key == ord("q"):
            if score > high_score:
                save_high_score(score)
            break
        elif key == curses.KEY_LEFT and player_x > 1:
            player_x -= 1
            play_sound("move.wav")
        elif key == curses.KEY_RIGHT and player_x < sw - 3:
            player_x += 1
            play_sound("move.wav")
        elif key == ord("p"):
            pause_menu(stdscr)

        time.sleep(speed)

if __name__ == "__main__":
    curses.wrapper(main)
